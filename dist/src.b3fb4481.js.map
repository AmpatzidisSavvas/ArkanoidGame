{"version":3,"sources":["view/CanvasView.ts","sprites/Ball.ts","sprites/Paddle.ts","Collision.ts","setup.ts","sprites/Brick.ts","helpers.ts","index.ts"],"names":[],"mappings":"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","file":"src.b3fb4481.js","sourceRoot":"..\\src","sourcesContent":["import { Brick } from \"~/sprites/Brick\";\r\nimport { Paddle } from \"~/sprites/Paddle\";\r\nimport { Ball } from \"~/sprites/Ball\";\r\n\r\nexport class CanvasView {\r\n    canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D | null;\r\n    private scoreDispaly: HTMLObjectElement | null;\r\n    private start: HTMLObjectElement | null;\r\n    private info: HTMLObjectElement | null;\r\n\r\n    constructor(canvasName: string) {\r\n        this.canvas= document.querySelector(canvasName) as HTMLCanvasElement;\r\n        this.context=this.canvas.getContext('2d');\r\n        this.scoreDispaly = document.querySelector('#score');\r\n        this.start = document.querySelector('#start');\r\n        this.info = document.querySelector('#info');\r\n    }\r\n\r\n    clear(): void {\r\n        this.context?.clearRect(0,0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    initStartButton(startFunction: (view: CanvasView) => void): void {\r\n        this.start?.addEventListener('click', () => startFunction(this))\r\n    }\r\n\r\n    drawScore(score: number): void {\r\n\r\n        if (this.scoreDispaly) {\r\n            this.scoreDispaly.innerHTML = score.toString();\r\n        }\r\n    }\r\n\r\n    drawInfo(text: string): void {\r\n\r\n        if (this.info) {\r\n            this.info.innerHTML = text;\r\n        }\r\n    }\r\n\r\n    drawSpite(brick: Brick | Paddle | Ball): void {\r\n\r\n        if (!brick) return;\r\n\r\n        this.context?.drawImage(\r\n            brick.image,\r\n            brick.pos.x,\r\n            brick.pos.y,\r\n            brick.width,\r\n            brick.height\r\n        );\r\n    }\r\n\r\n    drawBricks(bricks: Brick[]): void {\r\n\r\n        bricks.forEach(brick => this.drawSpite(brick));\r\n    }\r\n}","import { Vector } from \"~/types\";\r\n\r\nexport class Ball {\r\n    private speed: Vector;\r\n    private ballImage: HTMLImageElement = new Image();\r\n\r\n    constructor (\r\n        speed: number,\r\n        private ballSize: number,\r\n        private position: Vector,\r\n        image: string\r\n    ) {\r\n        this.ballSize = ballSize;\r\n        this.position = position;\r\n        this.speed = {\r\n            x: speed,\r\n            y: -speed\r\n        };\r\n        this.ballImage.src = image;\r\n    }\r\n\r\n    get width(): number {\r\n        return this.ballSize;\r\n    }\r\n\r\n    get height(): number {\r\n        return this.ballSize;\r\n    }\r\n\r\n    get pos(): Vector {\r\n        return this.position;\r\n    }\r\n\r\n    get image() : HTMLImageElement {\r\n        return this.ballImage;\r\n    }\r\n\r\n    // Methods\r\n    changeYDirection(): void {\r\n        this.speed.y = -this.speed.y;\r\n    }\r\n\r\n    changeXDirection(): void {\r\n        this.speed.x = -this.speed.x;\r\n    }\r\n\r\n    moveBall(): void {\r\n        this.pos.x += this.speed.x;\r\n        this.pos.y += this.speed.y;\r\n    }\r\n\r\n}","import { Vector } from \"~/types\";\r\n\r\nexport class Paddle {\r\n    private paddleImage: HTMLImageElement = new Image();\r\n    private moveLeft: boolean;\r\n    private moveRight: boolean;\r\n\r\n    constructor(\r\n        private speed: number,\r\n        private paddleWidth: number,\r\n        private paddleHeight: number,\r\n        private position: Vector,\r\n        image: string\r\n    ) {\r\n        this.speed = speed;\r\n        this.paddleHeight = paddleHeight;\r\n        this.paddleWidth = paddleWidth;\r\n        this.position = position;\r\n        this.moveLeft = false;\r\n        this.moveRight = false;\r\n        this.paddleImage.src = image;\r\n\r\n        // Event Listeners\r\n        document.addEventListener('keydown', this.handleKeyDown);\r\n        document.addEventListener('keyup', this.handleKeyUp);\r\n\r\n        \r\n    }\r\n\r\n    get width(): number {\r\n        return this.paddleWidth;\r\n    }\r\n\r\n    get height(): number {\r\n        return this.paddleHeight;\r\n    }\r\n\r\n    get pos(): Vector {\r\n        return this.position;\r\n    }\r\n\r\n    get image(): HTMLImageElement {\r\n        return this.paddleImage;\r\n    }\r\n\r\n    get isMovingLeft(): boolean {\r\n        return this.moveLeft;\r\n    }\r\n    get isMovingRight(): boolean {\r\n        return this.moveRight;\r\n    }\r\n\r\n    movePaddle(): void {\r\n\r\n        if (this.moveLeft) {\r\n            this.pos.x -= this.speed;\r\n        }\r\n\r\n        if (this.moveRight) {\r\n            this.pos.x += this.speed;\r\n        }\r\n    }\r\n\r\n    handleKeyUp = (e: KeyboardEvent): void => {\r\n\r\n        if (e.code === 'ArrowLeft' || e.key == 'ArrowLeft') {\r\n            this.moveLeft = false\r\n        }\r\n\r\n        if (e.code === 'ArrowRight' || e.key === 'ArrowRight') {\r\n            this.moveRight = false;\r\n        }\r\n\r\n    };\r\n\r\n    handleKeyDown = (e: KeyboardEvent): void => {\r\n\r\n        if (e.code === 'ArrowLeft' || e.key == 'ArrowLeft') {\r\n            this.moveLeft = true\r\n        }\r\n\r\n        if (e.code === 'ArrowRight' || e.key === 'ArrowRight') {\r\n            this.moveRight = true;\r\n        }\r\n    };\r\n}","import { Brick } from \"./sprites/Brick\";\r\nimport { Paddle } from \"./sprites/Paddle\";\r\nimport { Ball } from \"./sprites/Ball\";\r\nimport { CanvasView } from \"./view/CanvasView\";\r\n\r\nexport class Collision {\r\n\r\n    isCollidingBrick(ball: Ball, brick: Brick ): boolean {\r\n        if (\r\n            ball.pos.x < brick.pos.x + brick.width &&\r\n            ball.pos.x + ball.width > brick.pos.x &&\r\n            ball.pos.y < brick.pos.y + brick.height &&\r\n            ball.pos.y + ball.height > brick.pos.y\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isCollidingBricks(ball: Ball, bricks: Brick[]): boolean {\r\n\r\n        let colliding = false;\r\n\r\n        bricks.forEach((brick, i) => {\r\n            if (this.isCollidingBrick(ball, brick)) {\r\n                ball.changeYDirection();\r\n            \r\n\r\n                if (brick.energy === 1) {\r\n                    bricks.splice(i, 1);\r\n                } else {\r\n                    brick.energy -= 1;\r\n                }\r\n\r\n                colliding = true;\r\n            }    \r\n        });\r\n        return colliding;\r\n    }\r\n\r\n    checkBallCollision(ball: Ball, paddle: Paddle, view: CanvasView): void {\r\n\r\n        // Check ball collision with paddle\r\n        if (\r\n            ball.pos.x + ball.width > paddle.pos.x &&\r\n            ball.pos.x < paddle.pos.x + paddle.width &&\r\n            ball.pos.y + ball.height === paddle.pos.y )\r\n        {\r\n            ball.changeYDirection();\r\n        }\r\n\r\n        // Check ball collision with walls\r\n\r\n        if (ball.pos.x > view.canvas.width - ball.width || ball.pos.x < 0) {\r\n            ball.changeXDirection();\r\n        }\r\n\r\n        // Ball movement Y constraints\r\n        if (ball.pos.y < 0) {\r\n            ball.changeYDirection();\r\n        }\r\n    }\r\n}","import RED_BRICK_IMAGE from './images/brick-red.png';\r\nimport BLUE_BRICK_IMAGE from './images/brick-blue.png';\r\nimport GREEN_BRICK_IMAGE from './images/brick-green.png';\r\nimport YELLOW_BRICK_IMAGE from './images/brick-yellow.png';\r\nimport PURPLE_BRICK_IMAGE from './images/brick-purple.png';\r\n\r\n// Grab the canvas element for calculating the brick width\r\n// depending on canvas width\r\nconst canvas: HTMLCanvasElement | null = document.querySelector('#playField');\r\n\r\n// Constants\r\nexport const STAGE_PADDING = 20;\r\nexport const STAGE_ROWS = 20;\r\nexport const STAGE_COLS = 10;\r\nexport const BRICK_PADDING = 5;\r\nexport const BRICK_WIDTH = canvas\r\n  ? Math.floor((canvas.width - STAGE_PADDING * 2) / STAGE_COLS) - BRICK_PADDING\r\n  : 100;\r\nexport const BRICK_HEIGHT = canvas\r\n  ? Math.floor((canvas.height - STAGE_PADDING * 2) / STAGE_ROWS) - BRICK_PADDING\r\n  : 30;\r\nexport const PADDLE_WIDTH = 30;\r\nexport const PADDLE_HEIGHT = 110;\r\nexport const PADDLE_STARTX = 450;\r\nexport const PADDLE_SPEED = 3;\r\nexport const BALL_SPEED = 2;\r\nexport const BALL_SIZE = 20;\r\nexport const BALL_STARTX = 500;\r\nexport const BALL_STARTY = 500;\r\n\r\nexport const BRICK_IMAGES: { [key: number]: string } = {\r\n  1: RED_BRICK_IMAGE,\r\n  2: GREEN_BRICK_IMAGE,\r\n  3: YELLOW_BRICK_IMAGE,\r\n  4: BLUE_BRICK_IMAGE,\r\n  5: PURPLE_BRICK_IMAGE\r\n};\r\n\r\nexport const BRICK_ENERGY: { [key: number]: number } = {\r\n  1: 2, // Red brick\r\n  2: 2, // Green brick\r\n  3: 2, // Yellow brick\r\n  4: 4, // Blue brick\r\n  5: 5 // Purple brick\r\n};\r\n\r\n\r\nexport const LEVEL = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\r\n  0, 2, 2, 2, 2, 2, 2, 2, 2, 0,\r\n  0, 3, 3, 3, 3, 3, 3, 3, 3, 0,\r\n  0, 0, 4, 4, 4, 4, 4, 4, 0, 0, \r\n  0, 0, 5, 5, 0, 0, 5, 5, 0, 0,\r\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\r\n];","import { Vector } from \"~/types\";\r\n\r\nexport class Brick {\r\n    private brickImage: HTMLImageElement = new Image();\r\n\r\n    constructor(\r\n    private brickWidth: number, \r\n    private brickHeight: number,\r\n    private position: Vector,\r\n    private brickEnergy: number,\r\n    image: string\r\n    ) {\r\n        this.brickWidth = brickWidth;\r\n        this.brickHeight = brickHeight;\r\n        this.position = position;\r\n        this.brickEnergy = brickEnergy;\r\n        this.brickImage.src = image;\r\n    }\r\n\r\n    get width() : number {\r\n        return this.brickWidth;\r\n    }\r\n\r\n    get height() : number {\r\n        return this.brickHeight;\r\n    }\r\n\r\n    get pos() : Vector {\r\n        return this.position;\r\n    }\r\n\r\n    get image() : HTMLImageElement {\r\n        return this.brickImage;\r\n    }\r\n    get energy() : number {\r\n        return this.brickEnergy;\r\n    }\r\n\r\n    set energy(energy: number) {\r\n        this.brickEnergy = energy;\r\n    }\r\n}","import { Brick } from \"./sprites/Brick\";\r\nimport {\r\n    BRICK_IMAGES,\r\n    LEVEL,\r\n    STAGE_COLS,\r\n    STAGE_PADDING,\r\n    BRICK_WIDTH,\r\n    BRICK_HEIGHT,\r\n    BRICK_PADDING,\r\n    BRICK_ENERGY\r\n} from \"./setup\"\r\n\r\nexport function createBricks(): Brick[] {\r\n\r\n    return LEVEL.reduce((ack, element, i) => {\r\n        const  row = Math.floor((i +1) / STAGE_COLS);\r\n        const col = i % STAGE_COLS;\r\n\r\n        const x = STAGE_PADDING + col*(BRICK_WIDTH + BRICK_PADDING);\r\n        const y = STAGE_PADDING + row*(BRICK_HEIGHT + BRICK_PADDING);\r\n\r\n        if (element === 0) return ack;\r\n\r\n        return [\r\n            ...ack,\r\n            new Brick(\r\n                BRICK_WIDTH,\r\n                BRICK_HEIGHT,\r\n                {x, y},\r\n                BRICK_ENERGY[element],\r\n                BRICK_IMAGES[element]\r\n            )\r\n        ]\r\n    }, [] as Brick[]);\r\n}","import { CanvasView } from \"./view/CanvasView\";\r\nimport { Ball } from \"./sprites/Ball\";\r\nimport { Brick } from \"./sprites/Brick\";\r\nimport { Paddle } from \"./sprites/Paddle\";\r\nimport { Collision } from \"./Collision\";\r\nimport PADDLE_IMAGE from \"./images/paddle.png\"\r\nimport BALL_IMAGE from \"./images/ball.png\"\r\n\r\nimport {\r\n    PADDLE_WIDTH ,\r\n    PADDLE_HEIGHT,\r\n    PADDLE_STARTX,\r\n    PADDLE_SPEED,\r\n    BALL_SPEED,\r\n    BALL_SIZE,\r\n    BALL_STARTX,\r\n    BALL_STARTY\r\n} from './setup';\r\nimport { createBricks } from \"./helpers\";\r\n\r\nlet gameOver = false;\r\nlet score = 0;\r\n\r\nfunction setGameOver(view: CanvasView) {\r\n    view.drawInfo('GAME💀OVER')\r\n    gameOver = false;\r\n}\r\n\r\nfunction setGameWin(view: CanvasView) {\r\n    view.drawInfo('🚀WIN🚀');\r\n    gameOver = false;\r\n}\r\n\r\nfunction gameLoop(\r\n    view: CanvasView,\r\n    bricks: Brick[],\r\n    paddle: Paddle,\r\n    ball: Ball,\r\n    collision: Collision\r\n) {\r\n\r\n    view.clear();\r\n    view.drawBricks(bricks);\r\n    view.drawSpite(paddle);\r\n    view.drawSpite(ball);\r\n\r\n    // Move\r\n    ball.moveBall();\r\n\r\n    // Move paddle inside playfield\r\n    if (\r\n        (paddle.isMovingLeft && paddle.pos.x > 0) ||\r\n        (paddle.isMovingRight && paddle.pos.x < view.canvas.width - paddle.width)\r\n    ) {\r\n        paddle.movePaddle();\r\n    }\r\n\r\n    collision.checkBallCollision(ball, paddle, view);\r\n    const collidingBrick = collision.isCollidingBricks(ball, bricks);\r\n\r\n    if (collidingBrick) {\r\n        score += 1;\r\n        view.drawScore(score);\r\n    }\r\n\r\n    // Game over\r\n    if (ball.pos.y > view.canvas.height) {\r\n        gameOver = true;\r\n    }\r\n    // Game win\r\n    if (bricks.length === 0) {\r\n        return setGameWin(view);\r\n    }\r\n\r\n    if (gameOver) {\r\n        return setGameOver(view);\r\n    }\r\n\r\n    requestAnimationFrame( () => gameLoop(view, bricks, paddle, ball, collision));\r\n}\r\n\r\nfunction startGame(view: CanvasView) {\r\n\r\n    //Reset displays\r\n    score = 0;\r\n    view.drawInfo('');\r\n    view.drawScore(0);\r\n\r\n    // Create Collision\r\n    const collision = new Collision();\r\n\r\n    // Create all bricks\r\n    const bricks = createBricks();\r\n\r\n    // Create a ball\r\n    const ball = new Ball(\r\n        BALL_SPEED,\r\n        BALL_SIZE,\r\n        {\r\n            x: BALL_STARTX,\r\n            y: BALL_STARTY\r\n        },\r\n        BALL_IMAGE\r\n    )\r\n\r\n    // Create paddle\r\n    const paddle = new Paddle(\r\n        PADDLE_SPEED,\r\n        PADDLE_HEIGHT,\r\n        PADDLE_WIDTH,\r\n        {\r\n            x: PADDLE_STARTX,\r\n            y: view.canvas.height - 30\r\n        },\r\n        PADDLE_IMAGE\r\n    )\r\n\r\n    gameLoop(view, bricks, paddle, ball, collision);\r\n}\r\n\r\n// Create a new view\r\nconst view = new CanvasView('#playField');\r\nview.initStartButton(startGame);\r\n"]}